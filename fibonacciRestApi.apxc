public class FibonacciRestApi {
   
     public static HttpResponse RestCallout(){
          // create http request
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://scoutoutfit.com/fibonacci3.json');
        request.setMethod('GET');
        request.setHeader('Content-Type', 'application/json;charset=UTF-8');
        HttpResponse response = http.send(request);
        System.debug(response);
        
        // get json and deserialize it       
       if(response.getStatusCode() == 200){
            Map<String, Object> results = (Map<String, Object>)JSON.deserializeUntyped(response.getBody());
            List<Object> fibonacciArray = (List<Object>)results.get('fibonacci');
            System.debug(fibonacciArray);
             
            ReverseOrder(fibonacciArray);
     }
     return response;
  }
  
   public static void ReverseOrder(List<Object> fibonacciArray){
            
          List<Object> reversedFibonacciMulti = new List<Object>();
          List<Object> listArr1 = new List<Object>();
          List<Object> listArr2 = new List<Object>();
          List<Object> listArr3 = new List<Object>();
       
        //reverse order integers of in lists  
        for(Integer m = 0; m <fibonacciArray.size(); m++){
             List<Object> listArray = (List<Object>)fibonacciArray[m];
             System.debug(listArray); 
          for(Integer i = listArray.size()-1; i >= 0; i--){
              if(m == 0) {
                  listArr1.add(listArray[i]);
              } else if(m == 1){
                  listArr2.add(listArray[i]);
              } else if(m == 2){
                 listArr3.add(listArray[i]);   
              }
            }
            reversedFibonacciMulti.add(listArr1);
            reversedFibonacciMulti.add(listArr2);
            reversedFibonacciMulti.add(listArr3);
        }
           System.debug(reversedFibonacciMulti); 
    }
}
